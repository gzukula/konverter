package konverter.processor

import com.squareup.kotlinpoet.FileSpec
import com.squareup.kotlinpoet.FunSpec
import com.squareup.kotlinpoet.KModifier
import com.squareup.kotlinpoet.PropertySpec
import com.squareup.kotlinpoet.TypeSpec
import com.squareup.kotlinpoet.asTypeName
import konverter.Konvertable
import konverter.helper.elementUtils
import konverter.helper.filer
import konverter.helper.info
import javax.annotation.processing.AbstractProcessor
import javax.annotation.processing.RoundEnvironment
import javax.annotation.processing.SupportedAnnotationTypes
import javax.annotation.processing.SupportedSourceVersion
import javax.lang.model.SourceVersion
import javax.lang.model.element.ElementKind
import javax.lang.model.element.PackageElement
import javax.lang.model.element.TypeElement
import javax.lang.model.element.VariableElement

@SupportedSourceVersion(SourceVersion.RELEASE_8)
@SupportedAnnotationTypes("konverter.Konvertable")
class KonvertableProcessor : AbstractProcessor() {

    override fun process(
        annotations: MutableSet<out TypeElement>,
        roundEnv: RoundEnvironment
    ): Boolean {
        if (annotations.isEmpty()) return true

        // 1. find and filter elements related to the annotation processed
        val elements = roundEnv.getElementsAnnotatedWith(Konvertable::class.java)
            .filter { it.kind == ElementKind.CLASS }
            .filterIsInstance<TypeElement>()
        if (elements.isEmpty()) {
            return true
        }

        info { "KonvertableProcessor" }

        // todo 1 for test
        val element = elements.first()
        val packageElement: PackageElement = elementUtils.getPackageOf(element)
        val members = element.enclosedElements
            .filter { it.kind == ElementKind.FIELD }
            .filterIsInstance<VariableElement>()

        info { "KonvertableProcessor: $members" }

        val konvertable = element.getAnnotation(Konvertable::class.java)

        info { "KonvertableProcessor: $konvertable" }
        val fileName = "konvertable-generated"
        val packageName = packageElement.toString()

        val fileBuilder = FileSpec.builder(packageName, fileName)

        val classBuilder = TypeSpec.classBuilder(konvertable.name)
            .addKdoc("Generated by @Konvertable")
            .addModifiers(KModifier.DATA)

        val constructor = FunSpec.constructorBuilder()
        members.forEach {
            constructor.addParameter(
                name = it.simpleName.toString(),
                type = it.asType().asTypeName()
            )
            classBuilder.addProperty(
                PropertySpec.builder(
                    name = it.simpleName.toString(),
                    type = it.asType().asTypeName()
                ).initializer(it.simpleName.toString()).build()
            )
        }

        classBuilder.primaryConstructor(constructor.build())

        fileBuilder.addType(
            classBuilder.build()
        ).build().writeTo(filer)

        return true
    }
}